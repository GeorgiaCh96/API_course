[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "fastapi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fastapi",
        "description": "fastapi",
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security.oauth2",
        "description": "fastapi.security.oauth2",
        "isExtraImport": true,
        "detail": "fastapi.security.oauth2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "isExtraImport": true,
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "isExtraImport": true,
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "RealDictCursor",
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "isExtraImport": true,
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy.sql.sqltypes",
        "description": "sqlalchemy.sql.sqltypes",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.sqltypes",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "conint",
        "importPath": "pydantic.types",
        "description": "pydantic.types",
        "isExtraImport": true,
        "detail": "pydantic.types",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "schemas",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.calculations",
        "description": "app.calculations",
        "isExtraImport": true,
        "detail": "app.calculations",
        "documentation": {}
    },
    {
        "label": "authorized_client",
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "isExtraImport": true,
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "isExtraImport": true,
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic_db.versions.0dba9f495e8d_create_posts_table",
        "description": "alembic_db.versions.0dba9f495e8d_create_posts_table",
        "peekOfCode": "def upgrade() -> None:\n    # Create post table\n    op.create_table('posts', \n                    sa.Column('id', sa.Integer(), nullable=False, primary_key=True), \n                    sa.Column('title', sa.String(), nullable=False))\n    pass\n# handles rolling back any changes\ndef downgrade() -> None:\n    op.drop_table('posts')\n    pass",
        "detail": "alembic_db.versions.0dba9f495e8d_create_posts_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic_db.versions.0dba9f495e8d_create_posts_table",
        "description": "alembic_db.versions.0dba9f495e8d_create_posts_table",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_table('posts')\n    pass",
        "detail": "alembic_db.versions.0dba9f495e8d_create_posts_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic_db.versions.72694b1e5596_add_last_few_colums_to_posts_table",
        "description": "alembic_db.versions.72694b1e5596_add_last_few_colums_to_posts_table",
        "peekOfCode": "def upgrade() -> None:\n    op.add_column('posts', sa.Column(\n        'published', sa.Boolean(), nullable=False, server_default='TRUE'\n    ))\n    op.add_column('posts', sa.Column(\n        'created_at', sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text('NOW()')\n    ))\n    pass\ndef downgrade() -> None:\n    op.drop_column('posts', 'published')",
        "detail": "alembic_db.versions.72694b1e5596_add_last_few_colums_to_posts_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic_db.versions.72694b1e5596_add_last_few_colums_to_posts_table",
        "description": "alembic_db.versions.72694b1e5596_add_last_few_colums_to_posts_table",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_column('posts', 'published')\n    op.drop_column('posts', 'created_at')\n    pass",
        "detail": "alembic_db.versions.72694b1e5596_add_last_few_colums_to_posts_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic_db.versions.780d4761f447_add_user_table",
        "description": "alembic_db.versions.780d4761f447_add_user_table",
        "peekOfCode": "def upgrade() -> None:\n    op.create_table('users', \n                    sa.Column('id', sa.Integer(), nullable=False), \n                    sa.Column('email', sa.String(), nullable=False), \n                    sa.Column('password', sa.String(), nullable=False),\n                    sa.Column('created_at', sa.TIMESTAMP(timezone=True),\n                              server_default=sa.text('now()'), nullable=False),\n                    sa.PrimaryKeyConstraint('id'), \n                    sa.UniqueConstraint('email')\n                    )",
        "detail": "alembic_db.versions.780d4761f447_add_user_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic_db.versions.780d4761f447_add_user_table",
        "description": "alembic_db.versions.780d4761f447_add_user_table",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_table('users')\n    pass",
        "detail": "alembic_db.versions.780d4761f447_add_user_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic_db.versions.89b70a03f8b0_add_foreign_key_to_posts_table",
        "description": "alembic_db.versions.89b70a03f8b0_add_foreign_key_to_posts_table",
        "peekOfCode": "def upgrade() -> None:\n    op.add_column('posts', sa.Column('owner_id', sa.Integer(), nullable=False))\n    op.create_foreign_key('post_users_fk', source_table=\"posts\", referent_table=\"users\",\n                          local_cols=['owner_id'], remote_cols=['id'], ondelete=\"CASCADE\")\n    pass\ndef downgrade() -> None:\n    op.drop_constraint('post_users_fk', table_name='posts')\n    op.drop_column('posts', 'owner_id')\n    pass",
        "detail": "alembic_db.versions.89b70a03f8b0_add_foreign_key_to_posts_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic_db.versions.89b70a03f8b0_add_foreign_key_to_posts_table",
        "description": "alembic_db.versions.89b70a03f8b0_add_foreign_key_to_posts_table",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_constraint('post_users_fk', table_name='posts')\n    op.drop_column('posts', 'owner_id')\n    pass",
        "detail": "alembic_db.versions.89b70a03f8b0_add_foreign_key_to_posts_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic_db.versions.8c66a8531eec_add_content_column_to_posts_table",
        "description": "alembic_db.versions.8c66a8531eec_add_content_column_to_posts_table",
        "peekOfCode": "def upgrade() -> None:\n    op.add_column('posts', sa.Column('content', sa.String(), nullable=False))\n    pass\ndef downgrade() -> None:\n    op.drop_column('posts', 'content')\n    pass",
        "detail": "alembic_db.versions.8c66a8531eec_add_content_column_to_posts_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic_db.versions.8c66a8531eec_add_content_column_to_posts_table",
        "description": "alembic_db.versions.8c66a8531eec_add_content_column_to_posts_table",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_column('posts', 'content')\n    pass",
        "detail": "alembic_db.versions.8c66a8531eec_add_content_column_to_posts_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic_db.versions.c64f665942f8_add_phone_number",
        "description": "alembic_db.versions.c64f665942f8_add_phone_number",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('votes',\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('post_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),\n    sa.PrimaryKeyConstraint('user_id', 'post_id')\n    )\n    op.add_column('users', sa.Column('phone_number', sa.String(), nullable=True))",
        "detail": "alembic_db.versions.c64f665942f8_add_phone_number",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic_db.versions.c64f665942f8_add_phone_number",
        "description": "alembic_db.versions.c64f665942f8_add_phone_number",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'phone_number')\n    op.drop_table('votes')\n    # ### end Alembic commands ###",
        "detail": "alembic_db.versions.c64f665942f8_add_phone_number",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic_db.env",
        "description": "alembic_db.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic_db.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic_db.env",
        "description": "alembic_db.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic_db.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic_db.env",
        "description": "alembic_db.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\", f'postgresql+psycopg2://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}')\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "alembic_db.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic_db.env",
        "description": "alembic_db.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic_db.env",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "def login(user_credentials: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):\n    \"\"\"\n        user_credentials will return username and password only (won't return email --> change user_Credentials.email below to user_credentials.username)\n    {\n        \"username\": \"123\",\n        \"password\": \"123\"\n    }\n    !! Login through postman: instead of ussing Body > JSON raw format, use Body> form-data format\n    \"\"\"\n    user = db.query(models.User).filter(models.User.email == user_credentials.username).first()",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "router = APIRouter(tags = ['Authentication'])\n@router.post('/login', response_model=schemas.Token)\ndef login(user_credentials: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):\n    \"\"\"\n        user_credentials will return username and password only (won't return email --> change user_Credentials.email below to user_credentials.username)\n    {\n        \"username\": \"123\",\n        \"password\": \"123\"\n    }\n    !! Login through postman: instead of ussing Body > JSON raw format, use Body> form-data format",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def get_posts(db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user), limit: int=10, skip: int=0, search: Optional[str]=\"\"):  # retrieve all posts\n    #cursor.execute(\"\"\"SELECT * FROM posts\"\"\")\n    #posts = cursor.fetchall()\n    #posts = db.query(models.Post).filter(\n    #    models.Post.title.contains(search)).limit(limit).offset(skip).all()   #.filter(models.Post.owner_id==current_user.id).all()   # retrieve all the entries from post table (SELECT * FROM posts WHERE id==...)\n    posts=db.query(models.Post, func.count(models.Vote.post_id).label(\"votes\")).join(\n        models.Vote, models.Vote.post_id==models.Post.id, isouter=True).group_by(models.Post.id).filter(models.Post.title.contains(search)).limit(limit).offset(skip).all()  # Select posts.*, count(votes.post_id) as votes from posts LEFT OUTER JOIN votes ON posts.id=votes.post_id group by post_id\n    return posts  # will turn posts array into JSON format\n@router.post(\"/\", status_code=status.HTTP_201_CREATED, response_model=schemas.Post) \ndef create_posts(post: schemas.PostCreate, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):  ",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "create_posts",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def create_posts(post: schemas.PostCreate, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):  \n    \"\"\"\n        Retrieves the post and checks if data is valid (based on the class Post's schema we defined), \n        we expect the user to send this data schema: title str, content str\n        Also, if someone wants to access a resource, for which they must be logged in, they must provide \n        access token (get_current_user: int = Depends(oauth2.get_current_user))\n    \"\"\"\n    #post_dict = post.dict()\n    #post_dict['id'] = randrange(0, 1000000)\n    #my_posts.append(post_dict)  # append new post in my_posts list",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def get_post(id: int, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):  \n    \"\"\"   \n        Retrieve the particular post with ID: {id}, validate that id type is int, if it is not, convert it to int\n    \"\"\"\n    #post = db.query(models.Post).filter(models.Post.id == id).first()  # find 1st instance with requested id\n    #cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s \"\"\", (str(id),))  # convert id to str to pass it to the SQL query\n    #post = cursor.fetchone()\n    post = db.query(models.Post, func.count(models.Vote.post_id).label(\"votes\")).join(\n        models.Vote, models.Vote.post_id==models.Post.id, isouter=True).group_by(models.Post.id).filter(models.Post.id == id).first()\n    if not post:",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def delete_post(id: int, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):\n    \"\"\"\n        Deleting post with ID {id}\n    \"\"\"\n    #cursor.execute(\"\"\"DELETE FROM posts WHERE id = %s returning *\"\"\", (str(id), ))\n    #deleted_post = cursor.fetchone()\n    #conn.commit()  # commit changes\n    post_query = db.query(models.Post).filter(models.Post.id==id)\n    post = post_query.first()\n    if post == None:",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def update_post(id: int, updated_post: schemas.PostCreate,  db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):\n    post_query = db.query(models.Post).filter(models.Post.id == id)\n    post = post_query.first()\n    #cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s WHERE id= %s RETURNING * \"\"\", (post.title, post.content, post.published, str(id)))\n    #updated_post = cursor.fetchone()\n    #conn.commit()\n    if post == None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"post with id {id} does not exist\")\n    if post.owner_id != current_user.id:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Not authorized to perform requested action\")",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/posts\",\n    tags=['Posts']\n)\n# request Get method url: \"/posts\"\n@router.get(\"/\", response_model = List[schemas.PostOut])\n#@router.get(\"/\")\ndef get_posts(db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user), limit: int=10, skip: int=0, search: Optional[str]=\"\"):  # retrieve all posts\n    #cursor.execute(\"\"\"SELECT * FROM posts\"\"\")\n    #posts = cursor.fetchall()",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    # hash the password - user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    new_user = models.User(**user.dict())\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    return new_user\n@router.get('/{id}', response_model=schemas.UserOut)",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def get_user(id: int, db: Session = Depends(get_db)):\n    user = db.query(models.User).filter(models.User.id ==id).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail= f\"User with id: {id} does not exist\")\n    return user",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/users\",\n     tags=['Users']\n)\n@router.post(\"/\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserOut)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    # hash the password - user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    new_user = models.User(**user.dict())",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "vote",
        "kind": 2,
        "importPath": "app.routers.vote",
        "description": "app.routers.vote",
        "peekOfCode": "def vote(vote: schemas.Vote, db: Session = Depends(database.get_db), current_user: int = Depends(oauth2.get_current_user)):\n    post = db.query(models.Post).filter(models.Post.id == vote.post_id).first()\n    if not post:  # if post does not exist\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Post with id: {vote.post_id} does not exist\")\n    # check if this user already liked this post\n    vote_query = db.query(models.Vote).filter(models.Vote.post_id==vote.post_id, models.Vote.user_id==current_user.id) \n    found_vote = vote_query.first()\n    if (vote.dir)==1: \n        if found_vote:\n            raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail=f\"user {current_user.id} has already voted on post {vote.post_id}\")",
        "detail": "app.routers.vote",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.vote",
        "description": "app.routers.vote",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/vote\",\n    tags = ['Vote']\n)\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\ndef vote(vote: schemas.Vote, db: Session = Depends(database.get_db), current_user: int = Depends(oauth2.get_current_user)):\n    post = db.query(models.Post).filter(models.Post.id == vote.post_id).first()\n    if not post:  # if post does not exist\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Post with id: {vote.post_id} does not exist\")\n    # check if this user already liked this post",
        "detail": "app.routers.vote",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "app.calculations",
        "description": "app.calculations",
        "peekOfCode": "def add(num1: int, num2: 2):\n    return num1 + num2\ndef subtract(num1: int, num2: int):\n    return num1-num2",
        "detail": "app.calculations",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 2,
        "importPath": "app.calculations",
        "description": "app.calculations",
        "peekOfCode": "def subtract(num1: int, num2: int):\n    return num1-num2",
        "detail": "app.calculations",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Settings(BaseSettings):\n    # PROVIDE THE LIST OF ENVIRONMENT VARIABLES YOU WANT TO SET\n    database_hostname: str\n    database_port: int\n    database_password: str\n    database_name: str\n    database_username: str\n    secret_key: str\n    algorithm: str  = \"HS256\" \n    access_token_expire_minutes: int",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "settings = Settings()\nprint(settings.database_password)",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# CONNECT TO THE DATABASE\n# BUT SINCE WE HAVE SQLALCHEMY, WE DO NOT NEED THIS ANYMORE\n# while True: \n#     # try to connect to the postgres database",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "#SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "#SQLALCHEMY_DATABASE_URL = 'postgresql://<username>:<password>@<ip-address/hostname>/<database_name>'\n#SQLALCHEMY_DATABASE_URL = 'postgresql://postgres:postgres@localhost/fastapi'  # WE SHOULD NEVER HARD CODE\nSQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n# Dependency for database sessions\ndef get_db():\n    db = SessionLocal()\n    try:",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "#SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "#SQLALCHEMY_DATABASE_URL = 'postgresql://postgres:postgres@localhost/fastapi'  # WE SHOULD NEVER HARD CODE\nSQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n# Dependency for database sessions\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n# Dependency for database sessions\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n# Dependency for database sessions\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n# Dependency for database sessions\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# CONNECT TO THE DATABASE",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "Base = declarative_base()\n# Dependency for database sessions\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# CONNECT TO THE DATABASE\n# BUT SINCE WE HAVE SQLALCHEMY, WE DO NOT NEED THIS ANYMORE",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def root():\n    return {\"message\": \"Welcome to my NEW API! Pushing out to ubuntu\"}",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\n# https://fastapi.tiangolo.com/tutorial/cors/?h=cors#use-corsmiddleware\n#if your APIs where configured for a specific Webapp, you have to provide the specific origins that can access my API\n#origins = [\"https://www.google.com/\", \"https://www.youtube.com/\"]  # all domains that can talk to our API\norigins = [\"*\"]  # all domains that can talk to our API\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],   # allow all methods (POST, GET ETC.)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "#origins",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "#origins = [\"https://www.google.com/\", \"https://www.youtube.com/\"]  # all domains that can talk to our API\norigins = [\"*\"]  # all domains that can talk to our API\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],   # allow all methods (POST, GET ETC.)\n    allow_headers=[\"*\"],   # allow all headers\n)\n# Create Database tables",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "origins = [\"*\"]  # all domains that can talk to our API\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],   # allow all methods (POST, GET ETC.)\n    allow_headers=[\"*\"],   # allow all headers\n)\n# Create Database tables\n# models.Base.metadata.create_all(bind=engine)  # since we set up alembic, we can remove this line",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Post(Base):\n    __tablename__ = 'posts'\n    id = Column(Integer, primary_key=True, nullable=False)\n    title = Column(String, nullable=False)\n    content= Column(String, nullable=False)\n    published = Column(Boolean, nullable=False, server_default='TRUE')\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))\n    owner_id = Column(Integer, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), nullable=False) # foreign key definition\n    # fetch some info based on the relationship\n    owner = relationship(\"User\")  # fetch user based on the id",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class User(Base):\n    __tablename__=\"users\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    email = Column(String, nullable=False, unique=True)\n    password = Column(String, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))\n    phone_number = Column(String)\nclass Vote(Base):\n    __tablename__ = \"votes\"\n    user_id = Column(Integer, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Vote(Base):\n    __tablename__ = \"votes\"\n    user_id = Column(Integer, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), primary_key=True)\n    post_id = Column(Integer, ForeignKey(\"posts.id\", ondelete=\"CASCADE\"), primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode = data.copy()   # data to encode in our token\n    expire = datetime.now() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n# Verify access token\ndef verify_access_token(token: str, credentials_exception):\n    try:\n        payload =  jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])  # decode token using SECRET_KEY and ALGORITHM",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "verify_access_token",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def verify_access_token(token: str, credentials_exception):\n    try:\n        payload =  jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])  # decode token using SECRET_KEY and ALGORITHM\n        id = payload.get(\"user_id\")  # extract id\n        if id is None:\n            raise credentials_exception\n        token_data = schemas.TokenData(id=str(id))  # we only have id to extract\n    except JWTError:\n        raise credentials_exception\n    return token_data",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(database.get_db)):\n    # Calling verify_access_token\n    credentials_exception = HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, \n                                          detail=f\"could not validate credentials\", \n                                          headers={\"WWW-Authenticate\": \"Bearer\"})\n    token = verify_access_token(token, credentials_exception)\n    user = db.query(models.User).filter(models.User.id == token.id).first()\n    return user",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl = 'login')\n# secret_key verifies the integrity of our token\n# algorithm\n# expiration time of the token (how long the user can stay logged in)\n# to get a string like this run:\n# openssl rand -hex 32\nSECRET_KEY = settings.secret_key  # WE CANNOT HAVE THIS EXPOSED HERE --> Set it as env variable\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "SECRET_KEY = settings.secret_key  # WE CANNOT HAVE THIS EXPOSED HERE --> Set it as env variable\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()   # data to encode in our token\n    expire = datetime.now() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n# Verify access token",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "ALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()   # data to encode in our token\n    expire = datetime.now() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n# Verify access token\ndef verify_access_token(token: str, credentials_exception):",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()   # data to encode in our token\n    expire = datetime.now() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n# Verify access token\ndef verify_access_token(token: str, credentials_exception):\n    try:",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserOut(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass Post(BaseModel):\n    # schema / Pydantic model for 'Post'\n    title: str\n    content: str",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Post(BaseModel):\n    # schema / Pydantic model for 'Post'\n    title: str\n    content: str\n    published: bool = True   # optional field for user, default value for published is True\nclass PostBase(BaseModel):\n    title: str\n    content: str\n    published: bool = True   # optional field for user, default value for published is True\nclass PostCreate(PostBase):  # all of our pydantic models must inherit from PostBase (create new models using PostBase)",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostBase",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostBase(BaseModel):\n    title: str\n    content: str\n    published: bool = True   # optional field for user, default value for published is True\nclass PostCreate(PostBase):  # all of our pydantic models must inherit from PostBase (create new models using PostBase)\n    pass\n# Define what data you want to return in Response\nclass Post(PostBase):   \n    # inherit fields from PostBase class and add any extra fields you need:\n    id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostCreate(PostBase):  # all of our pydantic models must inherit from PostBase (create new models using PostBase)\n    pass\n# Define what data you want to return in Response\nclass Post(PostBase):   \n    # inherit fields from PostBase class and add any extra fields you need:\n    id: int\n    created_at: datetime\n    owner_id: int\n    owner: UserOut # pydantic model\n    class Config:",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Post(PostBase):   \n    # inherit fields from PostBase class and add any extra fields you need:\n    id: int\n    created_at: datetime\n    owner_id: int\n    owner: UserOut # pydantic model\n    class Config:\n        orm_mode = True\nclass PostOut(BaseModel):\n    Post: Post   # refering to pdantic Post (previous class)",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostOut",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostOut(BaseModel):\n    Post: Post   # refering to pdantic Post (previous class)\n    votes: int\n    class Config:\n        orm_mode = True\nclass UserCreate(BaseModel):\n    email: EmailStr\n    password: str\nclass UserLogin(BaseModel):\n    email: EmailStr",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserCreate(BaseModel):\n    email: EmailStr\n    password: str\nclass UserLogin(BaseModel):\n    email: EmailStr\n    password: str\n# Define a schema for the token\nclass Token(BaseModel):\n    access_token: str\n    token_type: str",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: EmailStr\n    password: str\n# Define a schema for the token\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[str] = None\nclass Vote(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[str] = None\nclass Vote(BaseModel):\n    post_id: int\n    dir: Annotated[int, Field(strict=True, le=1)]   #conint(le=1)   # <= 1, dir gets values 0 or 1",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class TokenData(BaseModel):\n    id: Optional[str] = None\nclass Vote(BaseModel):\n    post_id: int\n    dir: Annotated[int, Field(strict=True, le=1)]   #conint(le=1)   # <= 1, dir gets values 0 or 1",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Vote(BaseModel):\n    post_id: int\n    dir: Annotated[int, Field(strict=True, le=1)]   #conint(le=1)   # <= 1, dir gets values 0 or 1",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def hash(password: str):\n    return pwd_context.hash(password)\n# verify if hashed(plain_password) == hashed_password\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "verify",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n# encrypt passwords (hashing)\ndef hash(password: str):\n    return pwd_context.hash(password)\n# verify if hashed(plain_password) == hashed_password\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def session():\n    print(\"my session fixture ran\")\n    Base.metadata.drop_all(bind=engine) \n    Base.metadata.create_all(bind=engine) \n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n@pytest.fixture()",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def client(session):\n    def override_get_db():\n        # run this before we run our test\n        try:\n            yield session\n        finally:\n            session.close()\n    app.dependency_overrides[get_db] = override_get_db\n    yield  TestClient(app)\n    # run this code after our code finishes",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_user",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def test_user(client):\n    user_data = {\"email\": \"georgia@gmail.com\",\n              \"password\": \"password123\"}\n    res = client.post(\"/users/\", json=user_data)\n    assert res.status_code == 201\n    print(res.json())\n    new_user = res.json()\n    new_user['password'] = user_data['password']\n    return new_user\n@pytest.fixture",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_user2",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def test_user2(client):\n    user_data = {\"email\": \"georgia123@gmail.com\",\n              \"password\": \"password123\"}\n    res = client.post(\"/users/\", json=user_data)\n    assert res.status_code == 201\n    print(res.json())\n    new_user = res.json()\n    new_user['password'] = user_data['password']\n    return new_user\n@pytest.fixture",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def token(test_user):\n    return create_access_token({\"user_id\": test_user['id']})\n@pytest.fixture\ndef authorized_client(client, token):\n    client.headers = {\n        **client.headers,\n        \"Authorization\": f\"Bearer {token}\"\n    }\n    return client\n@pytest.fixture",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "authorized_client",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def authorized_client(client, token):\n    client.headers = {\n        **client.headers,\n        \"Authorization\": f\"Bearer {token}\"\n    }\n    return client\n@pytest.fixture\ndef test_posts(test_user, session, test_user2):\n    posts_data = [{\n        \"title\": \"first title\",",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_posts",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def test_posts(test_user, session, test_user2):\n    posts_data = [{\n        \"title\": \"first title\",\n        \"content\": \"first content\",\n        \"owner_id\": test_user['id']\n    },\n    {\n        \"title\": \"2nd title\",\n        \"content\": \"2nd content\",\n        \"owner_id\": test_user['id']",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "#SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "#SQLALCHEMY_DATABASE_URL = 'postgresql://postgres:postgres@localhost:5432/fastapi_test'  # postgresname:password\nSQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}_test'\nprint(settings.database_name)\ntry:\n    engine = create_engine(SQLALCHEMY_DATABASE_URL)\n    with engine.connect() as connection:\n        print(\"✅ Successfully connected to the database!\")\nexcept Exception as e:\n    print(\"❌ Database connection failed:\", e)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}_test'\nprint(settings.database_name)\ntry:\n    engine = create_engine(SQLALCHEMY_DATABASE_URL)\n    with engine.connect() as connection:\n        print(\"✅ Successfully connected to the database!\")\nexcept Exception as e:\n    print(\"❌ Database connection failed:\", e)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n#Base.metadata.create_all(bind=engine)  # will automatically create all tables in the test database",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "TestingSessionLocal",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n#Base.metadata.create_all(bind=engine)  # will automatically create all tables in the test database\n# Dependency for database sessions\n#def override_get_db():  # gives different session object (will overwrite our local DB )\n#    db = TestingSessionLocal()\n#    try:\n#        yield db\n#    finally:\n#        db.close()\n@pytest.fixture()",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 2,
        "importPath": "tests.database",
        "description": "tests.database",
        "peekOfCode": "def session():\n    print(\"my session fixture ran\")\n    Base.metadata.drop_all(bind=engine) \n    Base.metadata.create_all(bind=engine) \n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n@pytest.fixture()",
        "detail": "tests.database",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 2,
        "importPath": "tests.database",
        "description": "tests.database",
        "peekOfCode": "def client(session):\n    def override_get_db():\n        # run this before we run our test\n        try:\n            yield session\n        finally:\n            session.close()\n    app.dependency_overrides[get_db] = override_get_db\n    yield  TestClient(app)\n    # run this code after our code finishes",
        "detail": "tests.database",
        "documentation": {}
    },
    {
        "label": "#SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "tests.database",
        "description": "tests.database",
        "peekOfCode": "#SQLALCHEMY_DATABASE_URL = 'postgresql://postgres:postgres@localhost:5432/fastapi_test'  # postgresname:password\nSQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}_test'\nprint(settings.database_name)\nprint(SQLALCHEMY_DATABASE_URL)\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n#Base.metadata.create_all(bind=engine)  # will automatically create all tables in the test database\n# Dependency for database sessions\n#def override_get_db():  # gives different session object (will overwrite our local DB )\n#    db = TestingSessionLocal()",
        "detail": "tests.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "tests.database",
        "description": "tests.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}_test'\nprint(settings.database_name)\nprint(SQLALCHEMY_DATABASE_URL)\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n#Base.metadata.create_all(bind=engine)  # will automatically create all tables in the test database\n# Dependency for database sessions\n#def override_get_db():  # gives different session object (will overwrite our local DB )\n#    db = TestingSessionLocal()\n#    try:",
        "detail": "tests.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "tests.database",
        "description": "tests.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n#Base.metadata.create_all(bind=engine)  # will automatically create all tables in the test database\n# Dependency for database sessions\n#def override_get_db():  # gives different session object (will overwrite our local DB )\n#    db = TestingSessionLocal()\n#    try:\n#        yield db\n#    finally:\n#        db.close()",
        "detail": "tests.database",
        "documentation": {}
    },
    {
        "label": "TestingSessionLocal",
        "kind": 5,
        "importPath": "tests.database",
        "description": "tests.database",
        "peekOfCode": "TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n#Base.metadata.create_all(bind=engine)  # will automatically create all tables in the test database\n# Dependency for database sessions\n#def override_get_db():  # gives different session object (will overwrite our local DB )\n#    db = TestingSessionLocal()\n#    try:\n#        yield db\n#    finally:\n#        db.close()\n@pytest.fixture()",
        "detail": "tests.database",
        "documentation": {}
    },
    {
        "label": "test_add",
        "kind": 2,
        "importPath": "tests.test_calculations",
        "description": "tests.test_calculations",
        "peekOfCode": "def test_add(num1, num2, expected):\n    print(\" testing add function\")\n    assert add(num1, num2) == expected\ndef test_subtract():\n    assert subtract(5,2) ==3",
        "detail": "tests.test_calculations",
        "documentation": {}
    },
    {
        "label": "test_subtract",
        "kind": 2,
        "importPath": "tests.test_calculations",
        "description": "tests.test_calculations",
        "peekOfCode": "def test_subtract():\n    assert subtract(5,2) ==3",
        "detail": "tests.test_calculations",
        "documentation": {}
    },
    {
        "label": "test_get_all_posts",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_get_all_posts(authorized_client, test_posts):\n    res = authorized_client.get(\"/posts/\")\n    def validate(post):\n        return schemas.PostOut(**post)\n    posts_map = map(validate, res.json())\n    posts_list = list(posts_map)\n    print(list(posts_map))\n    print(res.json())\n    assert len(res.json()) == len(test_posts)\n    assert res.status_code == 200",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_unauthorized_user_get_all_posts",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_unauthorized_user_get_all_posts(client, test_posts):\n    res = client.get(f\"/posts/\")\n    assert res.status_code == 401\ndef test_unauthorized_user_get_all_posts(client, test_posts):\n    res = client.get(f\"/posts/{test_posts[0].id}\")\n    assert res.status_code == 401\ndef test_get_one_post_not_exist(authorized_client, test_posts):\n    res = authorized_client.get(f\"/posts/888888\")\n    assert res.status_code ==404\ndef test_get_one_post(authorized_client, test_posts):",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_unauthorized_user_get_all_posts",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_unauthorized_user_get_all_posts(client, test_posts):\n    res = client.get(f\"/posts/{test_posts[0].id}\")\n    assert res.status_code == 401\ndef test_get_one_post_not_exist(authorized_client, test_posts):\n    res = authorized_client.get(f\"/posts/888888\")\n    assert res.status_code ==404\ndef test_get_one_post(authorized_client, test_posts):\n    res = authorized_client.get(f\"/posts/{test_posts[0].id}\")\n    post = schemas.PostOut(**res.json())\n    assert post.Post.id == test_posts[0].id",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_get_one_post_not_exist",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_get_one_post_not_exist(authorized_client, test_posts):\n    res = authorized_client.get(f\"/posts/888888\")\n    assert res.status_code ==404\ndef test_get_one_post(authorized_client, test_posts):\n    res = authorized_client.get(f\"/posts/{test_posts[0].id}\")\n    post = schemas.PostOut(**res.json())\n    assert post.Post.id == test_posts[0].id\n    assert post.Post.content == test_posts[0].content\n    assert post.Post.title == test_posts[0].title\n@pytest.mark.parametrize(\"title, content, , published\",[",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_get_one_post",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_get_one_post(authorized_client, test_posts):\n    res = authorized_client.get(f\"/posts/{test_posts[0].id}\")\n    post = schemas.PostOut(**res.json())\n    assert post.Post.id == test_posts[0].id\n    assert post.Post.content == test_posts[0].content\n    assert post.Post.title == test_posts[0].title\n@pytest.mark.parametrize(\"title, content, , published\",[\n    (\"awesome new title\", \"awesome content\", \"True\"),\n    (\"awesome new title2\", \"awesome content2\", \"False\")\n])",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_create_post",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_create_post(authorized_client, test_user, test_posts, title, content, published):\n    res = authorized_client.post(\"/posts/\", json={\"title\": title, \"content\": content, \n                                                  \"published\": published})\n    created_post = schemas.Post(**res.json())\n    assert res.status_code == 201\n    assert created_post.title == title\n    assert created_post.content == content\n    assert created_post.published == published\n    assert created_post.owner_id == test_user['id']\ndef test_create_post_default_published_true(authorized_client, test_user, test_posts):",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_create_post_default_published_true",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_create_post_default_published_true(authorized_client, test_user, test_posts):\n    res = authorized_client.post(\"/posts/\", json={\"title\": \"random title\", \"content\": \"content\"})\n    created_post = schemas.Post(**res.json())\n    assert res.status_code == 201\n    assert created_post.title == \"random title\"\n    assert created_post.content == \"content\"\n    assert created_post.published == True\n    assert created_post.owner_id == test_user['id']\ndef test_unauthorized_user_create_post(client, test_user, test_posts):\n    res = client.post(\"/posts/\", json={\"title\": \"random title\", \"content\": \"random content\"})",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_unauthorized_user_create_post",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_unauthorized_user_create_post(client, test_user, test_posts):\n    res = client.post(\"/posts/\", json={\"title\": \"random title\", \"content\": \"random content\"})\n    assert res.status_code == 401\ndef test_unauthorized_user_delete_post(client, test_user, test_posts):\n    res = client.delete(f\"/posts/{test_posts[0].id}\")\n    assert res.status_code == 401\ndef test_delete_post_success(authorized_client, test_user, test_posts):\n    res = authorized_client.delete(f\"/posts/{test_posts[0].id}\")\n    assert res.status_code == 204\ndef test_delete_post_non_exist(authorized_client, test_user, test_posts):",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_unauthorized_user_delete_post",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_unauthorized_user_delete_post(client, test_user, test_posts):\n    res = client.delete(f\"/posts/{test_posts[0].id}\")\n    assert res.status_code == 401\ndef test_delete_post_success(authorized_client, test_user, test_posts):\n    res = authorized_client.delete(f\"/posts/{test_posts[0].id}\")\n    assert res.status_code == 204\ndef test_delete_post_non_exist(authorized_client, test_user, test_posts):\n    res = authorized_client.delete(f\"/posts/80000000\")\n    assert res.status_code == 404\ndef test_delete_other_user_post(authorized_client, test_user, test_posts):",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_delete_post_success",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_delete_post_success(authorized_client, test_user, test_posts):\n    res = authorized_client.delete(f\"/posts/{test_posts[0].id}\")\n    assert res.status_code == 204\ndef test_delete_post_non_exist(authorized_client, test_user, test_posts):\n    res = authorized_client.delete(f\"/posts/80000000\")\n    assert res.status_code == 404\ndef test_delete_other_user_post(authorized_client, test_user, test_posts):\n    res = authorized_client.delete(f\"/posts/{test_posts[3].id}\")\n    assert res.status_code ==403\ndef test_update_post(authorized_client, test_user, test_posts):",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_delete_post_non_exist",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_delete_post_non_exist(authorized_client, test_user, test_posts):\n    res = authorized_client.delete(f\"/posts/80000000\")\n    assert res.status_code == 404\ndef test_delete_other_user_post(authorized_client, test_user, test_posts):\n    res = authorized_client.delete(f\"/posts/{test_posts[3].id}\")\n    assert res.status_code ==403\ndef test_update_post(authorized_client, test_user, test_posts):\n    data = {\n        \"title\": \" updated title\",\n        \"content\": \"updated content\",",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_delete_other_user_post",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_delete_other_user_post(authorized_client, test_user, test_posts):\n    res = authorized_client.delete(f\"/posts/{test_posts[3].id}\")\n    assert res.status_code ==403\ndef test_update_post(authorized_client, test_user, test_posts):\n    data = {\n        \"title\": \" updated title\",\n        \"content\": \"updated content\",\n        \"id\": test_posts[0].id\n    }\n    res = authorized_client.put(f\"/posts/{test_posts[0].id}\", json=data)",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_update_post",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_update_post(authorized_client, test_user, test_posts):\n    data = {\n        \"title\": \" updated title\",\n        \"content\": \"updated content\",\n        \"id\": test_posts[0].id\n    }\n    res = authorized_client.put(f\"/posts/{test_posts[0].id}\", json=data)\n    updated_post = schemas.Post(**res.json())\n    assert res.status_code==200\n    assert updated_post.title == data['title']",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_updated_other_user_post",
        "kind": 2,
        "importPath": "tests.test_posts",
        "description": "tests.test_posts",
        "peekOfCode": "def test_updated_other_user_post(authorized_client, test_user, test_user2, test_posts):\n    data = {\n        \"title\": \" updated title\",\n        \"content\": \"updated content\",\n        \"id\": test_posts[3].id\n    }   \n    res = authorized_client.put(f\"/posts/{test_posts[3].id}\", json=data)\n    assert res.status_code == 403",
        "detail": "tests.test_posts",
        "documentation": {}
    },
    {
        "label": "test_create_user",
        "kind": 2,
        "importPath": "tests.test_users",
        "description": "tests.test_users",
        "peekOfCode": "def test_create_user(client):\n    res = client.post(\"/users/\", json={\"email\": \"hello123@gmail.com\", \"password\": \"password123\"})\n    new_user = schemas.UserOut(**res.json())  # checks if schema properties are included\n    assert new_user.email ==\"hello123@gmail.com\"\n    assert res.status_code == 201\ndef test_login_user(client, test_user):\n    res = client.post(\"/login\", data={\"username\": test_user['email'], \"password\": test_user['password']})\n    login_res = schemas.Token(**res.json())\n    payload =  jwt.decode(login_res.access_token, settings.secret_key, algorithms=[settings.algorithm])  # decode token using SECRET_KEY and ALGORITHM\n    id = payload.get(\"user_id\")  # extract id",
        "detail": "tests.test_users",
        "documentation": {}
    },
    {
        "label": "test_login_user",
        "kind": 2,
        "importPath": "tests.test_users",
        "description": "tests.test_users",
        "peekOfCode": "def test_login_user(client, test_user):\n    res = client.post(\"/login\", data={\"username\": test_user['email'], \"password\": test_user['password']})\n    login_res = schemas.Token(**res.json())\n    payload =  jwt.decode(login_res.access_token, settings.secret_key, algorithms=[settings.algorithm])  # decode token using SECRET_KEY and ALGORITHM\n    id = payload.get(\"user_id\")  # extract id\n    assert id == test_user['id']\n    assert login_res.token_type == \"bearer\"\n    assert res.status_code == 200\n#@pytest.mark.parametrize(\"email, password, status_code\", [\n#    (",
        "detail": "tests.test_users",
        "documentation": {}
    },
    {
        "label": "test_incorrect_login",
        "kind": 2,
        "importPath": "tests.test_users",
        "description": "tests.test_users",
        "peekOfCode": "def test_incorrect_login( client, data, status_code):\n    res = client.post(\"/login\", json=data)\n    assert res.status_code == status_code\n    #assert res.json().get('detail') == 'Invalid credentials'",
        "detail": "tests.test_users",
        "documentation": {}
    },
    {
        "label": "test_vote",
        "kind": 2,
        "importPath": "tests.test_votes",
        "description": "tests.test_votes",
        "peekOfCode": "def test_vote(test_posts, session, test_user):\n    new_vote = models.Vote(post_id=test_posts[3].id, user_id=test_user['id'])\n    session.add(new_vote)\n    session.commit()\ndef test_vote_on_post(authorized_client, test_posts):\n    res = authorized_client.post(\"/vote/\", json={\"post_id\": test_posts[3].id, \"dir\": 1})\n    assert res.status_code == 201\ndef test_vote_twice_post(authorized_client, test_posts, test_vote):\n    res = authorized_client.post(\"/vote/\", json={\"post_id\": test_posts[3].id, \"dir\": 1})\n    assert res.status_code == 409",
        "detail": "tests.test_votes",
        "documentation": {}
    },
    {
        "label": "test_vote_on_post",
        "kind": 2,
        "importPath": "tests.test_votes",
        "description": "tests.test_votes",
        "peekOfCode": "def test_vote_on_post(authorized_client, test_posts):\n    res = authorized_client.post(\"/vote/\", json={\"post_id\": test_posts[3].id, \"dir\": 1})\n    assert res.status_code == 201\ndef test_vote_twice_post(authorized_client, test_posts, test_vote):\n    res = authorized_client.post(\"/vote/\", json={\"post_id\": test_posts[3].id, \"dir\": 1})\n    assert res.status_code == 409\ndef test_delete_vote(authorized_client, test_posts, test_vote):\n    res=authorized_client.post(\"/vote/\", json={\"post_id\": test_posts[3].id, \"dir\": 0})\n    assert res.status_code==201",
        "detail": "tests.test_votes",
        "documentation": {}
    },
    {
        "label": "test_vote_twice_post",
        "kind": 2,
        "importPath": "tests.test_votes",
        "description": "tests.test_votes",
        "peekOfCode": "def test_vote_twice_post(authorized_client, test_posts, test_vote):\n    res = authorized_client.post(\"/vote/\", json={\"post_id\": test_posts[3].id, \"dir\": 1})\n    assert res.status_code == 409\ndef test_delete_vote(authorized_client, test_posts, test_vote):\n    res=authorized_client.post(\"/vote/\", json={\"post_id\": test_posts[3].id, \"dir\": 0})\n    assert res.status_code==201",
        "detail": "tests.test_votes",
        "documentation": {}
    },
    {
        "label": "test_delete_vote",
        "kind": 2,
        "importPath": "tests.test_votes",
        "description": "tests.test_votes",
        "peekOfCode": "def test_delete_vote(authorized_client, test_posts, test_vote):\n    res=authorized_client.post(\"/vote/\", json={\"post_id\": test_posts[3].id, \"dir\": 0})\n    assert res.status_code==201",
        "detail": "tests.test_votes",
        "documentation": {}
    }
]